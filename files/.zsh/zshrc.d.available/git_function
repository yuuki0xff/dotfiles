
function git-autoclone(){
	local args
	local repopath
	local show_help=0
	local invalid_option=0
	args=("$@")
	repopath=

	if ! (( $# )); then
		echo 'ERROR: クローンするリポジトリのURL を指定してください' >&2
		return 1
	fi

	while (( $# )); do
		case "$1" in
			-h|--help)
				show_help=1
				;;
			-*)
				;;
			https://*/*)
				repopath=${1#https://}
				case "$repopath" in
					*@*/*)
						# ユーザ名部分を除去
						repopath=${repopath#*@}
						;;
				esac
				;;
			http://*/*)
				repopath=${1#http://}
				case "$repopath" in
					*@*/*)
						# ユーザ名部分を除去
						repopath=${repopath#*@}
						;;
				esac
				;;
			git://*/*)
				# Git protocol
				# Ex: git://github.com:9418/cli/cli.git
				# Ex: git://github.com/cli/cli.git
				repopath=${1#git://}
				;;
			*:*/*)
				# SSH protocol
				# Ex: git@github.com:cli/cli.git
				# Ex: github.com:cli/cli.git
				repopath=$1
				case "$repopath" in
					*@*:*/*)
						# ユーザ名部分を除去
						repopath=${repopath#*@}
						;;
				esac
				repopath=${repopath/:/\/}
				;;
		esac
		shift
	done

	if [[ -z "$repopath" ]]; then
		echo 'You must specify a repo.' >&2
		echo  >&2
		invalid_option=1
	fi

	# strip .git suffix
	repopath=${repopath%.git}

	if (( $show_help )) || (( $invalid_option )); then
		echo 'Usage: git-autoclone [<git-clone options>] <repo>' >&2
		return $invalid_option
	fi

	()(
		_nohook=1
		cd ~/repo || return $?
		if [[ -d "$repopath" && -e "$repopath/.git" ]]; then
			cd "$repopath" || return $?
			git fetch -a
		else
			mkdir -p "$repopath" || return $?
			cd "$repopath" || return $?
			git clone "${args[@]}" .
		fi
	) && cd ~/repo/"$repopath"
}

function git-nw() {
	if ! [ 1 -le $# -a $# -le 2 ]; then
		echo 'Usage: git-nw <BRANCH_NAME> [COMMIT-ISH]'
		return 1
	fi
	git fetch || return 1
	local branch_name=$1
	local commit=${2:-origin/master}
	local project_name
	project_name=$(git remote get-url origin |sed 's@.*/@@; s/\.git$//') || return 1
	local dir_path
	dir_path="$HOME/work/${project_name}-$(sed 's@.*/@@' <<<"$branch_name")" || return 1
	git worktree add -b "$branch_name" "$dir_path" "$commit" || return 1
	echo
	echo '################################'
	echo
	echo "Created new worktree based on $commit"
	echo
	echo 'Latest commit:'
	git show --color "$commit" |cat
	echo
	echo '################################'
	echo
	cd "$dir_path"
}

function gitroot() {
	git rev-parse --show-toplevel
}

function cdg() {
	local d
	if d=$(gitroot); then
		cd "$(gitroot)"
	fi
}

# vim: ft=zsh
