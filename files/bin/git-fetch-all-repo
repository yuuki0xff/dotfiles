#!/bin/bash
# Usage:
#    git-fetch-all-repo
#
# ~/repo/ ディレクトリ以下にある全てのgitリポジトリで、git fetch --allコマンドを実行する。

set -eu

log_ok() {
	# Set foreground to green.
	tput setaf 10
	echo "$@"
	# Reset color.
	tput sgr0
}
log_error() {
	# Set foreground to red.
	tput setaf 9
	echo "$@"
	# Reset color.
	tput sgr0
}

list_repo_locations() {
	if which fdfind &>/dev/null; then
		fdfind -HI -g .git ~/repo/
	else
		find ~/repo/ -name .git
	fi |sed 's/\.git$//'
}

fetch_repo() {
	local repo=$1

	local tmp tmp_out tmp_in1 tmp_in2
	tmp=$(mktemp)
	exec {tmp_out}>>"$tmp"
	exec {tmp_in1}<"$tmp"
	exec {tmp_in2}<"$tmp"
	rm -f "$tmp"

	# NOTE: Ctrl-Cを押すとスクリプトは停止するが、git fetchコマンドは停止せずにバックグラウンドで動き続ける。
	if (cd "$repo" && setsid --wait --fork git fetch --all --recurse-submodules=yes --jobs 1) </dev/null >&"$tmp_out" 2>&1; then
		flock 1
		log_ok "$repo" ... OK
	else
		# Command failed.

		# Write to error log.
		flock 2
		{
			echo "$repo"
			cat <&"$tmp_in1"
			echo
		} >&2

		# Show error log to terminal.
		flock 1
		log_error "$repo" ... FAILED
		cat <&"$tmp_in2"
		echo
	fi
}

main() {
	local err
	err=$(mktemp)
	exec {err_out}>"$err"
	exec {err_in}<"$err"
	rm -f "$err"

	export -f fetch_repo
	export -f log_ok
	export -f log_error
	list_repo_locations |xargs -P8 -n1 -- bash -euc 'fetch_repo "$@"' _ 2>&"$err_out"

	if [ -s "$err" ]; then
		echo
		echo 'ERROR: Some repositories are failed to fetch from remote.'
		# The err file is not empty.
		# Show error messages.
		cat <&"$err_in"
	fi >&2
}

main
